/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var google_protobuf_empty_pb = require('google-protobuf/google/protobuf/empty_pb.js');
var google_protobuf_timestamp_pb = require('google-protobuf/google/protobuf/timestamp_pb.js');
var google_api_annotations_pb = require('./google/api/annotations_pb.js');
goog.exportSymbol('proto.CellProperties', null, global);
goog.exportSymbol('proto.CellProperties.Border', null, global);
goog.exportSymbol('proto.CellProperties.Border.BorderProperties', null, global);
goog.exportSymbol('proto.CellProperties.FontStyle', null, global);
goog.exportSymbol('proto.CellProperties.LineStyle', null, global);
goog.exportSymbol('proto.DeleteExcelReportRequest', null, global);
goog.exportSymbol('proto.DeleteExcelReportResponse', null, global);
goog.exportSymbol('proto.ExcelReport', null, global);
goog.exportSymbol('proto.ListExcelReportResponse', null, global);
goog.exportSymbol('proto.PageRequest', null, global);
goog.exportSymbol('proto.RealtimeCurrencyExchangeRate', null, global);
goog.exportSymbol('proto.Stock', null, global);
goog.exportSymbol('proto.StockList', null, global);
goog.exportSymbol('proto.StockPrice', null, global);
goog.exportSymbol('proto.StockPriceSnapshot', null, global);
goog.exportSymbol('proto.StockRequest', null, global);
goog.exportSymbol('proto.SymbolListRequest', null, global);
goog.exportSymbol('proto.TradeRequest', null, global);
goog.exportSymbol('proto.TradeRequestList', null, global);
goog.exportSymbol('proto.TradeResponse', null, global);
goog.exportSymbol('proto.TradeResponseList', null, global);
goog.exportSymbol('proto.TradeType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StockList.repeatedFields_, null);
};
goog.inherits(proto.StockList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockList.displayName = 'proto.StockList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StockList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StockList.prototype.toObject = function(opt_includeInstance) {
  return proto.StockList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StockList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockList.toObject = function(includeInstance, msg) {
  var f, obj = {
    stocksList: jspb.Message.toObjectList(msg.getStocksList(),
    proto.Stock.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockList}
 */
proto.StockList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockList;
  return proto.StockList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockList}
 */
proto.StockList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.Stock;
      reader.readMessage(value,proto.Stock.deserializeBinaryFromReader);
      msg.addStocks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StockList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStocksList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.Stock.serializeBinaryToWriter
    );
  }
};


/**
 * repeated Stock stocks = 1;
 * @return {!Array<!proto.Stock>}
 */
proto.StockList.prototype.getStocksList = function() {
  return /** @type{!Array<!proto.Stock>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Stock, 1));
};


/** @param {!Array<!proto.Stock>} value */
proto.StockList.prototype.setStocksList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.Stock=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Stock}
 */
proto.StockList.prototype.addStocks = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.Stock, opt_index);
};


proto.StockList.prototype.clearStocksList = function() {
  this.setStocksList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Stock = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Stock, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Stock.displayName = 'proto.Stock';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Stock.prototype.toObject = function(opt_includeInstance) {
  return proto.Stock.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Stock} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stock.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Stock}
 */
proto.Stock.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Stock;
  return proto.Stock.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Stock} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Stock}
 */
proto.Stock.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Stock.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Stock.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Stock} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Stock.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.Stock.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.Stock.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.Stock.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.Stock.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StockRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockRequest.displayName = 'proto.StockRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StockRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.StockRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StockRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockRequest}
 */
proto.StockRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockRequest;
  return proto.StockRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockRequest}
 */
proto.StockRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StockRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.StockRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StockRequest.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SymbolListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SymbolListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SymbolListRequest.displayName = 'proto.SymbolListRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SymbolListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.SymbolListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SymbolListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SymbolListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    prefix: jspb.Message.getFieldWithDefault(msg, 1, ""),
    pagesize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SymbolListRequest}
 */
proto.SymbolListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SymbolListRequest;
  return proto.SymbolListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SymbolListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SymbolListRequest}
 */
proto.SymbolListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setPrefix(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPagesize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SymbolListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.SymbolListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.SymbolListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.SymbolListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPrefix();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPagesize();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
};


/**
 * optional string prefix = 1;
 * @return {string}
 */
proto.SymbolListRequest.prototype.getPrefix = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.SymbolListRequest.prototype.setPrefix = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional uint32 pageSize = 2;
 * @return {number}
 */
proto.SymbolListRequest.prototype.getPagesize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.SymbolListRequest.prototype.setPagesize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockPrice = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.StockPrice, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockPrice.displayName = 'proto.StockPrice';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StockPrice.prototype.toObject = function(opt_includeInstance) {
  return proto.StockPrice.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StockPrice} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPrice.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    price: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockPrice}
 */
proto.StockPrice.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockPrice;
  return proto.StockPrice.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockPrice} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockPrice}
 */
proto.StockPrice.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 30:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockPrice.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StockPrice.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockPrice} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPrice.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      30,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.StockPrice.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.StockPrice.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional float price = 2;
 * @return {number}
 */
proto.StockPrice.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.StockPrice.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 30;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.StockPrice.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 30));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.StockPrice.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 30, value);
};


proto.StockPrice.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StockPrice.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 30) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.StockPriceSnapshot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.StockPriceSnapshot.repeatedFields_, null);
};
goog.inherits(proto.StockPriceSnapshot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.StockPriceSnapshot.displayName = 'proto.StockPriceSnapshot';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.StockPriceSnapshot.repeatedFields_ = [2,3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.StockPriceSnapshot.prototype.toObject = function(opt_includeInstance) {
  return proto.StockPriceSnapshot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.StockPriceSnapshot} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPriceSnapshot.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f),
    symbolsList: jspb.Message.getRepeatedField(msg, 2),
    pricesList: jspb.Message.toObjectList(msg.getPricesList(),
    proto.StockPrice.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.StockPriceSnapshot}
 */
proto.StockPriceSnapshot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.StockPriceSnapshot;
  return proto.StockPriceSnapshot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.StockPriceSnapshot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.StockPriceSnapshot}
 */
proto.StockPriceSnapshot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.addSymbols(value);
      break;
    case 3:
      var value = new proto.StockPrice;
      reader.readMessage(value,proto.StockPrice.deserializeBinaryFromReader);
      msg.addPrices(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.StockPriceSnapshot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.StockPriceSnapshot.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.StockPriceSnapshot} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.StockPriceSnapshot.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
  f = message.getSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      2,
      f
    );
  }
  f = message.getPricesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.StockPrice.serializeBinaryToWriter
    );
  }
};


/**
 * optional google.protobuf.Timestamp timestamp = 1;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.StockPriceSnapshot.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 1));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.StockPriceSnapshot.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.StockPriceSnapshot.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.StockPriceSnapshot.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated string symbols = 2;
 * @return {!Array<string>}
 */
proto.StockPriceSnapshot.prototype.getSymbolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 2));
};


/** @param {!Array<string>} value */
proto.StockPriceSnapshot.prototype.setSymbolsList = function(value) {
  jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.StockPriceSnapshot.prototype.addSymbols = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


proto.StockPriceSnapshot.prototype.clearSymbolsList = function() {
  this.setSymbolsList([]);
};


/**
 * repeated StockPrice prices = 3;
 * @return {!Array<!proto.StockPrice>}
 */
proto.StockPriceSnapshot.prototype.getPricesList = function() {
  return /** @type{!Array<!proto.StockPrice>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.StockPrice, 3));
};


/** @param {!Array<!proto.StockPrice>} value */
proto.StockPriceSnapshot.prototype.setPricesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.StockPrice=} opt_value
 * @param {number=} opt_index
 * @return {!proto.StockPrice}
 */
proto.StockPriceSnapshot.prototype.addPrices = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.StockPrice, opt_index);
};


proto.StockPriceSnapshot.prototype.clearPricesList = function() {
  this.setPricesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TradeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TradeRequest.displayName = 'proto.TradeRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeRequest}
 */
proto.TradeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeRequest;
  return proto.TradeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeRequest}
 */
proto.TradeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {!proto.TradeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.TradeRequest.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TradeRequest.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 quantity = 2;
 * @return {number}
 */
proto.TradeRequest.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TradeRequest.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TradeType type = 3;
 * @return {!proto.TradeType}
 */
proto.TradeRequest.prototype.getType = function() {
  return /** @type {!proto.TradeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TradeType} value */
proto.TradeRequest.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional float price = 4;
 * @return {number}
 */
proto.TradeRequest.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.TradeRequest.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.TradeResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TradeResponse.displayName = 'proto.TradeResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: jspb.Message.getFieldWithDefault(msg, 1, ""),
    quantity: jspb.Message.getFieldWithDefault(msg, 2, 0),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    price: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    totalCost: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    timestamp: (f = msg.getTimestamp()) && google_protobuf_timestamp_pb.Timestamp.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeResponse}
 */
proto.TradeResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeResponse;
  return proto.TradeResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeResponse}
 */
proto.TradeResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setQuantity(value);
      break;
    case 3:
      var value = /** @type {!proto.TradeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalCost(value);
      break;
    case 6:
      var value = new google_protobuf_timestamp_pb.Timestamp;
      reader.readMessage(value,google_protobuf_timestamp_pb.Timestamp.deserializeBinaryFromReader);
      msg.setTimestamp(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getQuantity();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTotalCost();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getTimestamp();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      google_protobuf_timestamp_pb.Timestamp.serializeBinaryToWriter
    );
  }
};


/**
 * optional string symbol = 1;
 * @return {string}
 */
proto.TradeResponse.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.TradeResponse.prototype.setSymbol = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 quantity = 2;
 * @return {number}
 */
proto.TradeResponse.prototype.getQuantity = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.TradeResponse.prototype.setQuantity = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional TradeType type = 3;
 * @return {!proto.TradeType}
 */
proto.TradeResponse.prototype.getType = function() {
  return /** @type {!proto.TradeType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.TradeType} value */
proto.TradeResponse.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional float price = 4;
 * @return {number}
 */
proto.TradeResponse.prototype.getPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.TradeResponse.prototype.setPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float total_cost = 5;
 * @return {number}
 */
proto.TradeResponse.prototype.getTotalCost = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.TradeResponse.prototype.setTotalCost = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional google.protobuf.Timestamp timestamp = 6;
 * @return {?proto.google.protobuf.Timestamp}
 */
proto.TradeResponse.prototype.getTimestamp = function() {
  return /** @type{?proto.google.protobuf.Timestamp} */ (
    jspb.Message.getWrapperField(this, google_protobuf_timestamp_pb.Timestamp, 6));
};


/** @param {?proto.google.protobuf.Timestamp|undefined} value */
proto.TradeResponse.prototype.setTimestamp = function(value) {
  jspb.Message.setWrapperField(this, 6, value);
};


proto.TradeResponse.prototype.clearTimestamp = function() {
  this.setTimestamp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.TradeResponse.prototype.hasTimestamp = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.PageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.PageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.PageRequest.displayName = 'proto.PageRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.PageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.PageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.PageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    page: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pageSize: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.PageRequest}
 */
proto.PageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.PageRequest;
  return proto.PageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.PageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.PageRequest}
 */
proto.PageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPage(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPageSize(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.PageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.PageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.PageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.PageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getPageSize();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 page = 1;
 * @return {number}
 */
proto.PageRequest.prototype.getPage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.PageRequest.prototype.setPage = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 page_size = 2;
 * @return {number}
 */
proto.PageRequest.prototype.getPageSize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.PageRequest.prototype.setPageSize = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeRequestList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TradeRequestList.repeatedFields_, null);
};
goog.inherits(proto.TradeRequestList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TradeRequestList.displayName = 'proto.TradeRequestList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TradeRequestList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeRequestList.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeRequestList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeRequestList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeRequestList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.TradeRequest.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeRequestList}
 */
proto.TradeRequestList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeRequestList;
  return proto.TradeRequestList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeRequestList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeRequestList}
 */
proto.TradeRequestList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TradeRequest;
      reader.readMessage(value,proto.TradeRequest.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeRequestList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeRequestList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeRequestList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeRequestList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TradeRequest.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TradeRequest trades = 1;
 * @return {!Array<!proto.TradeRequest>}
 */
proto.TradeRequestList.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.TradeRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TradeRequest, 1));
};


/** @param {!Array<!proto.TradeRequest>} value */
proto.TradeRequestList.prototype.setTradesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TradeRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TradeRequest}
 */
proto.TradeRequestList.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TradeRequest, opt_index);
};


proto.TradeRequestList.prototype.clearTradesList = function() {
  this.setTradesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.TradeResponseList = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.TradeResponseList.repeatedFields_, null);
};
goog.inherits(proto.TradeResponseList, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.TradeResponseList.displayName = 'proto.TradeResponseList';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.TradeResponseList.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.TradeResponseList.prototype.toObject = function(opt_includeInstance) {
  return proto.TradeResponseList.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.TradeResponseList} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeResponseList.toObject = function(includeInstance, msg) {
  var f, obj = {
    tradesList: jspb.Message.toObjectList(msg.getTradesList(),
    proto.TradeResponse.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.TradeResponseList}
 */
proto.TradeResponseList.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.TradeResponseList;
  return proto.TradeResponseList.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.TradeResponseList} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.TradeResponseList}
 */
proto.TradeResponseList.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.TradeResponse;
      reader.readMessage(value,proto.TradeResponse.deserializeBinaryFromReader);
      msg.addTrades(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.TradeResponseList.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.TradeResponseList.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.TradeResponseList} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.TradeResponseList.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTradesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.TradeResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated TradeResponse trades = 1;
 * @return {!Array<!proto.TradeResponse>}
 */
proto.TradeResponseList.prototype.getTradesList = function() {
  return /** @type{!Array<!proto.TradeResponse>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.TradeResponse, 1));
};


/** @param {!Array<!proto.TradeResponse>} value */
proto.TradeResponseList.prototype.setTradesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.TradeResponse=} opt_value
 * @param {number=} opt_index
 * @return {!proto.TradeResponse}
 */
proto.TradeResponseList.prototype.addTrades = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.TradeResponse, opt_index);
};


proto.TradeResponseList.prototype.clearTradesList = function() {
  this.setTradesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.RealtimeCurrencyExchangeRate = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.RealtimeCurrencyExchangeRate, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.RealtimeCurrencyExchangeRate.displayName = 'proto.RealtimeCurrencyExchangeRate';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.RealtimeCurrencyExchangeRate.prototype.toObject = function(opt_includeInstance) {
  return proto.RealtimeCurrencyExchangeRate.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.RealtimeCurrencyExchangeRate} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RealtimeCurrencyExchangeRate.toObject = function(includeInstance, msg) {
  var f, obj = {
    fromCurrencyCode: jspb.Message.getFieldWithDefault(msg, 1, ""),
    fromCurrencyName: jspb.Message.getFieldWithDefault(msg, 2, ""),
    toCurrencyCode: jspb.Message.getFieldWithDefault(msg, 3, ""),
    toCurrencyName: jspb.Message.getFieldWithDefault(msg, 4, ""),
    exchangeRate: +jspb.Message.getFieldWithDefault(msg, 5, 0.0),
    lastRefreshed: jspb.Message.getFieldWithDefault(msg, 6, ""),
    timeZone: jspb.Message.getFieldWithDefault(msg, 7, ""),
    bidPrice: +jspb.Message.getFieldWithDefault(msg, 8, 0.0),
    askPrice: +jspb.Message.getFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.RealtimeCurrencyExchangeRate}
 */
proto.RealtimeCurrencyExchangeRate.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.RealtimeCurrencyExchangeRate;
  return proto.RealtimeCurrencyExchangeRate.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.RealtimeCurrencyExchangeRate} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.RealtimeCurrencyExchangeRate}
 */
proto.RealtimeCurrencyExchangeRate.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromCurrencyCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFromCurrencyName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setToCurrencyCode(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setToCurrencyName(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setExchangeRate(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setLastRefreshed(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimeZone(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBidPrice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAskPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.RealtimeCurrencyExchangeRate.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.RealtimeCurrencyExchangeRate.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.RealtimeCurrencyExchangeRate} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.RealtimeCurrencyExchangeRate.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFromCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getFromCurrencyName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getToCurrencyCode();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getToCurrencyName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getExchangeRate();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getLastRefreshed();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getTimeZone();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getBidPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getAskPrice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional string from_currency_code = 1;
 * @return {string}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getFromCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.RealtimeCurrencyExchangeRate.prototype.setFromCurrencyCode = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string from_currency_name = 2;
 * @return {string}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getFromCurrencyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.RealtimeCurrencyExchangeRate.prototype.setFromCurrencyName = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string to_currency_code = 3;
 * @return {string}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getToCurrencyCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.RealtimeCurrencyExchangeRate.prototype.setToCurrencyCode = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string to_currency_name = 4;
 * @return {string}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getToCurrencyName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.RealtimeCurrencyExchangeRate.prototype.setToCurrencyName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional double exchange_rate = 5;
 * @return {number}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getExchangeRate = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 5, 0.0));
};


/** @param {number} value */
proto.RealtimeCurrencyExchangeRate.prototype.setExchangeRate = function(value) {
  jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional string last_refreshed = 6;
 * @return {string}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getLastRefreshed = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/** @param {string} value */
proto.RealtimeCurrencyExchangeRate.prototype.setLastRefreshed = function(value) {
  jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string time_zone = 7;
 * @return {string}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getTimeZone = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/** @param {string} value */
proto.RealtimeCurrencyExchangeRate.prototype.setTimeZone = function(value) {
  jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional double bid_price = 8;
 * @return {number}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getBidPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 8, 0.0));
};


/** @param {number} value */
proto.RealtimeCurrencyExchangeRate.prototype.setBidPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double ask_price = 9;
 * @return {number}
 */
proto.RealtimeCurrencyExchangeRate.prototype.getAskPrice = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 9, 0.0));
};


/** @param {number} value */
proto.RealtimeCurrencyExchangeRate.prototype.setAskPrice = function(value) {
  jspb.Message.setProto3FloatField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CellProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CellProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CellProperties.displayName = 'proto.CellProperties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CellProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.CellProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CellProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    backgroundColor: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    font: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fontStyle: (f = msg.getFontStyle()) && proto.CellProperties.FontStyle.toObject(includeInstance, f),
    textColor: +jspb.Message.getFieldWithDefault(msg, 4, 0.0),
    cellValue: jspb.Message.getFieldWithDefault(msg, 5, ""),
    cellWeight: +jspb.Message.getFieldWithDefault(msg, 6, 0.0),
    cellHeight: +jspb.Message.getFieldWithDefault(msg, 7, 0.0),
    border: (f = msg.getBorder()) && proto.CellProperties.Border.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CellProperties}
 */
proto.CellProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CellProperties;
  return proto.CellProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CellProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CellProperties}
 */
proto.CellProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setBackgroundColor(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setFont(value);
      break;
    case 3:
      var value = new proto.CellProperties.FontStyle;
      reader.readMessage(value,proto.CellProperties.FontStyle.deserializeBinaryFromReader);
      msg.setFontStyle(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTextColor(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setCellValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCellWeight(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setCellHeight(value);
      break;
    case 8:
      var value = new proto.CellProperties.Border;
      reader.readMessage(value,proto.CellProperties.Border.deserializeBinaryFromReader);
      msg.setBorder(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CellProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CellProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CellProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBackgroundColor();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getFont();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFontStyle();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CellProperties.FontStyle.serializeBinaryToWriter
    );
  }
  f = message.getTextColor();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getCellValue();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getCellWeight();
  if (f !== 0.0) {
    writer.writeDouble(
      6,
      f
    );
  }
  f = message.getCellHeight();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getBorder();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.CellProperties.Border.serializeBinaryToWriter
    );
  }
};


/**
 * @enum {number}
 */
proto.CellProperties.LineStyle = {
  NONE: 0,
  SOLID: 1,
  DASHED: 2,
  DOTTED: 3,
  DOUBLE: 4,
  DASH_DOTTED: 5,
  DASH_DOT_DOTTED: 6,
  SLANT_DASH_DOTTED: 7
};


/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CellProperties.FontStyle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CellProperties.FontStyle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CellProperties.FontStyle.displayName = 'proto.CellProperties.FontStyle';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CellProperties.FontStyle.prototype.toObject = function(opt_includeInstance) {
  return proto.CellProperties.FontStyle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CellProperties.FontStyle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.FontStyle.toObject = function(includeInstance, msg) {
  var f, obj = {
    bold: jspb.Message.getFieldWithDefault(msg, 1, false),
    italic: jspb.Message.getFieldWithDefault(msg, 2, false),
    underline: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CellProperties.FontStyle}
 */
proto.CellProperties.FontStyle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CellProperties.FontStyle;
  return proto.CellProperties.FontStyle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CellProperties.FontStyle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CellProperties.FontStyle}
 */
proto.CellProperties.FontStyle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setBold(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setItalic(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setUnderline(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CellProperties.FontStyle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CellProperties.FontStyle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CellProperties.FontStyle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.FontStyle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBold();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
  f = message.getItalic();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getUnderline();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional bool bold = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CellProperties.FontStyle.prototype.getBold = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.CellProperties.FontStyle.prototype.setBold = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * optional bool italic = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.CellProperties.FontStyle.prototype.getItalic = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.CellProperties.FontStyle.prototype.setItalic = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional int32 underline = 3;
 * @return {number}
 */
proto.CellProperties.FontStyle.prototype.getUnderline = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.CellProperties.FontStyle.prototype.setUnderline = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CellProperties.Border = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CellProperties.Border, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CellProperties.Border.displayName = 'proto.CellProperties.Border';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CellProperties.Border.prototype.toObject = function(opt_includeInstance) {
  return proto.CellProperties.Border.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CellProperties.Border} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.Border.toObject = function(includeInstance, msg) {
  var f, obj = {
    all: (f = msg.getAll()) && proto.CellProperties.Border.BorderProperties.toObject(includeInstance, f),
    top: (f = msg.getTop()) && proto.CellProperties.Border.BorderProperties.toObject(includeInstance, f),
    bottom: (f = msg.getBottom()) && proto.CellProperties.Border.BorderProperties.toObject(includeInstance, f),
    left: (f = msg.getLeft()) && proto.CellProperties.Border.BorderProperties.toObject(includeInstance, f),
    right: (f = msg.getRight()) && proto.CellProperties.Border.BorderProperties.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CellProperties.Border}
 */
proto.CellProperties.Border.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CellProperties.Border;
  return proto.CellProperties.Border.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CellProperties.Border} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CellProperties.Border}
 */
proto.CellProperties.Border.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.CellProperties.Border.BorderProperties;
      reader.readMessage(value,proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader);
      msg.setAll(value);
      break;
    case 2:
      var value = new proto.CellProperties.Border.BorderProperties;
      reader.readMessage(value,proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader);
      msg.setTop(value);
      break;
    case 3:
      var value = new proto.CellProperties.Border.BorderProperties;
      reader.readMessage(value,proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader);
      msg.setBottom(value);
      break;
    case 4:
      var value = new proto.CellProperties.Border.BorderProperties;
      reader.readMessage(value,proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader);
      msg.setLeft(value);
      break;
    case 5:
      var value = new proto.CellProperties.Border.BorderProperties;
      reader.readMessage(value,proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader);
      msg.setRight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CellProperties.Border.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CellProperties.Border.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CellProperties.Border} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.Border.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAll();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter
    );
  }
  f = message.getTop();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter
    );
  }
  f = message.getBottom();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter
    );
  }
  f = message.getLeft();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter
    );
  }
  f = message.getRight();
  if (f != null) {
    writer.writeMessage(
      5,
      f,
      proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter
    );
  }
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.CellProperties.Border.BorderProperties = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.CellProperties.Border.BorderProperties, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.CellProperties.Border.BorderProperties.displayName = 'proto.CellProperties.Border.BorderProperties';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.CellProperties.Border.BorderProperties.prototype.toObject = function(opt_includeInstance) {
  return proto.CellProperties.Border.BorderProperties.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.CellProperties.Border.BorderProperties} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.Border.BorderProperties.toObject = function(includeInstance, msg) {
  var f, obj = {
    color: +jspb.Message.getFieldWithDefault(msg, 1, 0.0),
    thickness: +jspb.Message.getFieldWithDefault(msg, 2, 0.0),
    linestyle: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.BorderProperties.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.CellProperties.Border.BorderProperties;
  return proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.CellProperties.Border.BorderProperties} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.BorderProperties.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setColor(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setThickness(value);
      break;
    case 3:
      var value = /** @type {!proto.CellProperties.LineStyle} */ (reader.readEnum());
      msg.setLinestyle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.CellProperties.Border.BorderProperties.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.CellProperties.Border.BorderProperties} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.CellProperties.Border.BorderProperties.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getColor();
  if (f !== 0.0) {
    writer.writeDouble(
      1,
      f
    );
  }
  f = message.getThickness();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = message.getLinestyle();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
};


/**
 * optional double color = 1;
 * @return {number}
 */
proto.CellProperties.Border.BorderProperties.prototype.getColor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.CellProperties.Border.BorderProperties.prototype.setColor = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional double thickness = 2;
 * @return {number}
 */
proto.CellProperties.Border.BorderProperties.prototype.getThickness = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 2, 0.0));
};


/** @param {number} value */
proto.CellProperties.Border.BorderProperties.prototype.setThickness = function(value) {
  jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional LineStyle lineStyle = 3;
 * @return {!proto.CellProperties.LineStyle}
 */
proto.CellProperties.Border.BorderProperties.prototype.getLinestyle = function() {
  return /** @type {!proto.CellProperties.LineStyle} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.CellProperties.LineStyle} value */
proto.CellProperties.Border.BorderProperties.prototype.setLinestyle = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional BorderProperties all = 1;
 * @return {?proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.prototype.getAll = function() {
  return /** @type{?proto.CellProperties.Border.BorderProperties} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.Border.BorderProperties, 1));
};


/** @param {?proto.CellProperties.Border.BorderProperties|undefined} value */
proto.CellProperties.Border.prototype.setAll = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.CellProperties.Border.prototype.clearAll = function() {
  this.setAll(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.Border.prototype.hasAll = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional BorderProperties top = 2;
 * @return {?proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.prototype.getTop = function() {
  return /** @type{?proto.CellProperties.Border.BorderProperties} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.Border.BorderProperties, 2));
};


/** @param {?proto.CellProperties.Border.BorderProperties|undefined} value */
proto.CellProperties.Border.prototype.setTop = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.CellProperties.Border.prototype.clearTop = function() {
  this.setTop(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.Border.prototype.hasTop = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BorderProperties bottom = 3;
 * @return {?proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.prototype.getBottom = function() {
  return /** @type{?proto.CellProperties.Border.BorderProperties} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.Border.BorderProperties, 3));
};


/** @param {?proto.CellProperties.Border.BorderProperties|undefined} value */
proto.CellProperties.Border.prototype.setBottom = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CellProperties.Border.prototype.clearBottom = function() {
  this.setBottom(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.Border.prototype.hasBottom = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional BorderProperties left = 4;
 * @return {?proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.prototype.getLeft = function() {
  return /** @type{?proto.CellProperties.Border.BorderProperties} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.Border.BorderProperties, 4));
};


/** @param {?proto.CellProperties.Border.BorderProperties|undefined} value */
proto.CellProperties.Border.prototype.setLeft = function(value) {
  jspb.Message.setWrapperField(this, 4, value);
};


proto.CellProperties.Border.prototype.clearLeft = function() {
  this.setLeft(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.Border.prototype.hasLeft = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional BorderProperties right = 5;
 * @return {?proto.CellProperties.Border.BorderProperties}
 */
proto.CellProperties.Border.prototype.getRight = function() {
  return /** @type{?proto.CellProperties.Border.BorderProperties} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.Border.BorderProperties, 5));
};


/** @param {?proto.CellProperties.Border.BorderProperties|undefined} value */
proto.CellProperties.Border.prototype.setRight = function(value) {
  jspb.Message.setWrapperField(this, 5, value);
};


proto.CellProperties.Border.prototype.clearRight = function() {
  this.setRight(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.Border.prototype.hasRight = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * optional double background_color = 1;
 * @return {number}
 */
proto.CellProperties.prototype.getBackgroundColor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 1, 0.0));
};


/** @param {number} value */
proto.CellProperties.prototype.setBackgroundColor = function(value) {
  jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional string font = 2;
 * @return {string}
 */
proto.CellProperties.prototype.getFont = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.CellProperties.prototype.setFont = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional FontStyle font_style = 3;
 * @return {?proto.CellProperties.FontStyle}
 */
proto.CellProperties.prototype.getFontStyle = function() {
  return /** @type{?proto.CellProperties.FontStyle} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.FontStyle, 3));
};


/** @param {?proto.CellProperties.FontStyle|undefined} value */
proto.CellProperties.prototype.setFontStyle = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.CellProperties.prototype.clearFontStyle = function() {
  this.setFontStyle(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.prototype.hasFontStyle = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double text_color = 4;
 * @return {number}
 */
proto.CellProperties.prototype.getTextColor = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 4, 0.0));
};


/** @param {number} value */
proto.CellProperties.prototype.setTextColor = function(value) {
  jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional string cell_value = 5;
 * @return {string}
 */
proto.CellProperties.prototype.getCellValue = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/** @param {string} value */
proto.CellProperties.prototype.setCellValue = function(value) {
  jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional double cell_weight = 6;
 * @return {number}
 */
proto.CellProperties.prototype.getCellWeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 6, 0.0));
};


/** @param {number} value */
proto.CellProperties.prototype.setCellWeight = function(value) {
  jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional double cell_height = 7;
 * @return {number}
 */
proto.CellProperties.prototype.getCellHeight = function() {
  return /** @type {number} */ (+jspb.Message.getFieldWithDefault(this, 7, 0.0));
};


/** @param {number} value */
proto.CellProperties.prototype.setCellHeight = function(value) {
  jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional Border border = 8;
 * @return {?proto.CellProperties.Border}
 */
proto.CellProperties.prototype.getBorder = function() {
  return /** @type{?proto.CellProperties.Border} */ (
    jspb.Message.getWrapperField(this, proto.CellProperties.Border, 8));
};


/** @param {?proto.CellProperties.Border|undefined} value */
proto.CellProperties.prototype.setBorder = function(value) {
  jspb.Message.setWrapperField(this, 8, value);
};


proto.CellProperties.prototype.clearBorder = function() {
  this.setBorder(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.CellProperties.prototype.hasBorder = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ExcelReport = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ExcelReport.repeatedFields_, null);
};
goog.inherits(proto.ExcelReport, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ExcelReport.displayName = 'proto.ExcelReport';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ExcelReport.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ExcelReport.prototype.toObject = function(opt_includeInstance) {
  return proto.ExcelReport.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ExcelReport} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExcelReport.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, ""),
    cellPropertiesList: jspb.Message.toObjectList(msg.getCellPropertiesList(),
    proto.CellProperties.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ExcelReport}
 */
proto.ExcelReport.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ExcelReport;
  return proto.ExcelReport.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ExcelReport} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ExcelReport}
 */
proto.ExcelReport.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportId(value);
      break;
    case 2:
      var value = new proto.CellProperties;
      reader.readMessage(value,proto.CellProperties.deserializeBinaryFromReader);
      msg.addCellProperties(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ExcelReport.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ExcelReport.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ExcelReport} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ExcelReport.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCellPropertiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.CellProperties.serializeBinaryToWriter
    );
  }
};


/**
 * optional string report_id = 1;
 * @return {string}
 */
proto.ExcelReport.prototype.getReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.ExcelReport.prototype.setReportId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated CellProperties cell_properties = 2;
 * @return {!Array<!proto.CellProperties>}
 */
proto.ExcelReport.prototype.getCellPropertiesList = function() {
  return /** @type{!Array<!proto.CellProperties>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.CellProperties, 2));
};


/** @param {!Array<!proto.CellProperties>} value */
proto.ExcelReport.prototype.setCellPropertiesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.CellProperties=} opt_value
 * @param {number=} opt_index
 * @return {!proto.CellProperties}
 */
proto.ExcelReport.prototype.addCellProperties = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.CellProperties, opt_index);
};


proto.ExcelReport.prototype.clearCellPropertiesList = function() {
  this.setCellPropertiesList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ListExcelReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ListExcelReportResponse.repeatedFields_, null);
};
goog.inherits(proto.ListExcelReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.ListExcelReportResponse.displayName = 'proto.ListExcelReportResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ListExcelReportResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ListExcelReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.ListExcelReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ListExcelReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListExcelReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportsList: jspb.Message.toObjectList(msg.getReportsList(),
    proto.ExcelReport.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ListExcelReportResponse}
 */
proto.ListExcelReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ListExcelReportResponse;
  return proto.ListExcelReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ListExcelReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ListExcelReportResponse}
 */
proto.ListExcelReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ExcelReport;
      reader.readMessage(value,proto.ExcelReport.deserializeBinaryFromReader);
      msg.addReports(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ListExcelReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ListExcelReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ListExcelReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ListExcelReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ExcelReport.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ExcelReport reports = 1;
 * @return {!Array<!proto.ExcelReport>}
 */
proto.ListExcelReportResponse.prototype.getReportsList = function() {
  return /** @type{!Array<!proto.ExcelReport>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ExcelReport, 1));
};


/** @param {!Array<!proto.ExcelReport>} value */
proto.ListExcelReportResponse.prototype.setReportsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ExcelReport=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ExcelReport}
 */
proto.ListExcelReportResponse.prototype.addReports = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ExcelReport, opt_index);
};


proto.ListExcelReportResponse.prototype.clearReportsList = function() {
  this.setReportsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteExcelReportRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteExcelReportRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteExcelReportRequest.displayName = 'proto.DeleteExcelReportRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteExcelReportRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteExcelReportRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteExcelReportRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteExcelReportRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    reportId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteExcelReportRequest}
 */
proto.DeleteExcelReportRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteExcelReportRequest;
  return proto.DeleteExcelReportRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteExcelReportRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteExcelReportRequest}
 */
proto.DeleteExcelReportRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setReportId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteExcelReportRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteExcelReportRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteExcelReportRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteExcelReportRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getReportId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string report_id = 1;
 * @return {string}
 */
proto.DeleteExcelReportRequest.prototype.getReportId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.DeleteExcelReportRequest.prototype.setReportId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.DeleteExcelReportResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.DeleteExcelReportResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.DeleteExcelReportResponse.displayName = 'proto.DeleteExcelReportResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.DeleteExcelReportResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.DeleteExcelReportResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.DeleteExcelReportResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteExcelReportResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    deleted: jspb.Message.getFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.DeleteExcelReportResponse}
 */
proto.DeleteExcelReportResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.DeleteExcelReportResponse;
  return proto.DeleteExcelReportResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.DeleteExcelReportResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.DeleteExcelReportResponse}
 */
proto.DeleteExcelReportResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setDeleted(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.DeleteExcelReportResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.DeleteExcelReportResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.DeleteExcelReportResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.DeleteExcelReportResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDeleted();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool deleted = 1;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.DeleteExcelReportResponse.prototype.getDeleted = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 1, false));
};


/** @param {boolean} value */
proto.DeleteExcelReportResponse.prototype.setDeleted = function(value) {
  jspb.Message.setProto3BooleanField(this, 1, value);
};


/**
 * @enum {number}
 */
proto.TradeType = {
  BUY: 0,
  SELL: 1
};

goog.object.extend(exports, proto);
