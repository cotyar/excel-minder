# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
import stock_simulator_pb2 as stock__simulator__pb2


class StockSimulatorStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ListStocks = channel.unary_unary(
                '/StockSimulator/ListStocks',
                request_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
                response_deserializer=stock__simulator__pb2.StockList.FromString,
                )
        self.GetStockPrice = channel.unary_unary(
                '/StockSimulator/GetStockPrice',
                request_serializer=stock__simulator__pb2.StockRequest.SerializeToString,
                response_deserializer=stock__simulator__pb2.StockPrice.FromString,
                )
        self.ExecuteTrade = channel.unary_unary(
                '/StockSimulator/ExecuteTrade',
                request_serializer=stock__simulator__pb2.TradeRequest.SerializeToString,
                response_deserializer=stock__simulator__pb2.TradeResponse.FromString,
                )
        self.LastTradeRequests = channel.unary_unary(
                '/StockSimulator/LastTradeRequests',
                request_serializer=stock__simulator__pb2.PageRequest.SerializeToString,
                response_deserializer=stock__simulator__pb2.TradeRequestList.FromString,
                )
        self.LastExecutedTrades = channel.unary_unary(
                '/StockSimulator/LastExecutedTrades',
                request_serializer=stock__simulator__pb2.PageRequest.SerializeToString,
                response_deserializer=stock__simulator__pb2.TradeResponseList.FromString,
                )


class StockSimulatorServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ListStocks(self, request, context):
        """Returns a list of available stocks
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetStockPrice(self, request, context):
        """Returns the current price of a stock
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ExecuteTrade(self, request, context):
        """Executes a trade on the stock market
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LastTradeRequests(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LastExecutedTrades(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_StockSimulatorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ListStocks': grpc.unary_unary_rpc_method_handler(
                    servicer.ListStocks,
                    request_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
                    response_serializer=stock__simulator__pb2.StockList.SerializeToString,
            ),
            'GetStockPrice': grpc.unary_unary_rpc_method_handler(
                    servicer.GetStockPrice,
                    request_deserializer=stock__simulator__pb2.StockRequest.FromString,
                    response_serializer=stock__simulator__pb2.StockPrice.SerializeToString,
            ),
            'ExecuteTrade': grpc.unary_unary_rpc_method_handler(
                    servicer.ExecuteTrade,
                    request_deserializer=stock__simulator__pb2.TradeRequest.FromString,
                    response_serializer=stock__simulator__pb2.TradeResponse.SerializeToString,
            ),
            'LastTradeRequests': grpc.unary_unary_rpc_method_handler(
                    servicer.LastTradeRequests,
                    request_deserializer=stock__simulator__pb2.PageRequest.FromString,
                    response_serializer=stock__simulator__pb2.TradeRequestList.SerializeToString,
            ),
            'LastExecutedTrades': grpc.unary_unary_rpc_method_handler(
                    servicer.LastExecutedTrades,
                    request_deserializer=stock__simulator__pb2.PageRequest.FromString,
                    response_serializer=stock__simulator__pb2.TradeResponseList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'StockSimulator', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class StockSimulator(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ListStocks(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockSimulator/ListStocks',
            google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
            stock__simulator__pb2.StockList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetStockPrice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockSimulator/GetStockPrice',
            stock__simulator__pb2.StockRequest.SerializeToString,
            stock__simulator__pb2.StockPrice.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ExecuteTrade(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockSimulator/ExecuteTrade',
            stock__simulator__pb2.TradeRequest.SerializeToString,
            stock__simulator__pb2.TradeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LastTradeRequests(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockSimulator/LastTradeRequests',
            stock__simulator__pb2.PageRequest.SerializeToString,
            stock__simulator__pb2.TradeRequestList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LastExecutedTrades(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/StockSimulator/LastExecutedTrades',
            stock__simulator__pb2.PageRequest.SerializeToString,
            stock__simulator__pb2.TradeResponseList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
