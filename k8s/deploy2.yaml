apiVersion: v1
kind: Service
metadata:
name: redis-service
labels:
app: redis
spec:
ports:

    port: 6379
    selector:
    app: redis
    type: ClusterIP

apiVersion: apps/v1
kind: Deployment
metadata:
name: redis-deployment
spec:
replicas: 1
selector:
matchLabels:
app: redis
template:
metadata:
labels:
app: redis
spec:
containers:
- name: redis
image: redis:5.0.7
ports:
- containerPort: 6379

apiVersion: v1
kind: Service
metadata:
name: jupyter-service
labels:
app: jupyter
spec:
ports:

    port: 8888
    selector:
    app: jupyter
    type: ClusterIP

apiVersion: apps/v1
kind: Deployment
metadata:
name: jupyter-deployment
spec:
replicas: 1
selector:
matchLabels:
app: jupyter
template:
metadata:
labels:
app: jupyter
spec:
containers:
- name: jupyter
image: jupyter/scipy-notebook:latest
ports:
- containerPort: 8888

apiVersion: v1
kind: Service
metadata:
name: nginx-service
labels:
app: nginx
spec:
ports:

    port: 18090
    selector:
    app: nginx
    type: ClusterIP

apiVersion: apps/v1
kind: Deployment
metadata:
name: nginx-deployment
spec:
replicas: 1
selector:
matchLabels:
app: nginx
template:
metadata:
labels:
app: nginx
spec:
containers:
- name: nginx
image: nginx:1.17
ports:
- containerPort: 18090

apiVersion: extensions/v1beta1
kind: Ingress
metadata:
name: jupyter-ingress
annotations:
nginx.ingress.kubernetes.io/rewrite-target: /$1
spec:
rules:

    host: jupyter.example.com
    http:
    paths:
        path: /(.*)
        backend:
        serviceName: jupyter-service
        servicePort: 8888
    host: nginx.example.com
    http:
    paths:
        path: /(.*)
        backend:
        serviceName: nginx-service
        servicePort: 18090

apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
name: allow-egress
spec:
podSelector: {}
policyTypes:

    Egress
    egress:
    to:
        ipBlock